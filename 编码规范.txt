1 目的
一.为了统一公司软件开发设计过程的编程规范
二.使网站开发人员能很方便的理解每个目录,变量，控件，类，方法的意义
三.为了保证编写出的程序都符合相同的规范，保证一致性、统一性而建立的程序编码规范。
四.编码规范和约定必须能明显改善代码可读性，并有助于代码管理、分类范围适用于企业所有基于.NET平台的软件开发工作

2 注释规范
2.1 概述

a) 注释要求英文及英文的标点符号。
b) 注释中，应标明对象的完整的名称及其用途，但应避免对代码过于详细的描述。
c) 每行注释的最大长度为100个字符。
d) 重要变量必须有注释。
e) 变量注释和变量在同一行，所有注释必须对齐
f) 典型算法必须有注释。
g) 在循环和逻辑分支地方的上行必须就近书写注释。
h) 程序段或语句的注释在程序段或语句的上一行

3 命名总体规则
3.1 名字应该能够标识事物的特性。
3.2 名字一律使用英文单词，而不能为拼音。
3.3 名字尽量不使用缩写，除非它是众所周知的。
3.4 名字可以有两个或三个单词组成，但不应多于三个，控制在3至30个字母以内。
3.5 在名字中，多个单词用大写第一个字母（其它字母小写）来分隔。例如：IsSuperUser。
3.6 名字尽量使用前缀而不是后缀。
3.7 名字中的单词尽量使用名词，如有动词，也尽量放在后面。例如：FunctionUserDelete（而不是FunctionDeleteUser）。

4 编码规则
6.1 错误检查规则
a) 编程中要考虑函数的各种执行情况，尽可能处理所有流程情况。
b) 检查所有的系统调用的错误信息，除非要忽略错误。
c) 将函数分两类：一类为与屏幕的显示无关，另一类与屏幕的显示有关。对于与屏幕显示无关的函数，函数通过返回值来报告错误。
	对于与屏幕显示有关的函数，函数要负责向用户发出警告，并进行错误处理。
d) 错误处理代码一般放在函数末尾。
e) 对于通用的错误处理，可建立通用的错误处理函数，处理常见的通用的错误。
6.2 小括号规则
a) 不要把小括号和关键词（if 、while等）紧贴在一起，要用空格隔开它们。
b) 不要把小括号和函数名紧贴在一起。
c) 除非必要，不要在Return返回语句中使用小括号。因为关键字不是函数，如果小括号紧贴着函数名和关键字，二者很容易被看成是一体的。

If Then Else规则 ..
如果你有用到else if 语句的话，通常最好有一个else块以用于处理未处理到的其他情况
多if条件尽量使用switch来编写

比较规则
总是将恒量放在等号/不等号的左边。一个原因是假如你在等式中漏了一个等号，语法检查器会为你报错。第二个原因是你能立刻找到数值而不是在你的表达式的末端找到它。例如：
if ( 6 == $errorNum ) ... 

Switch Case规则
default case总应该存在，如果不允许到达，则应该保证：若到达了就会触发一个错误。Case的选择条件最好使用int或string类型。

单语句规则
除非这些语句有很密切的联系，否则每行只写一个语句。

 单一功能规则
原则上，一个程序单元（函数、例程、方法）只完成一项功能, 复杂功能的业务逻辑应该拆分!!

定义常量规则
对于代码中引用的常量（尤其是数字），应该define成一个大写的名字，在代码中引用名字而不直接引用值

模块化规则
某一功能，如果重复实现一遍以上，即应考虑模块化，将它写成通用函数。并向小组成员发布。同时要尽可能利用其它人的现成模块。

交流规则
共享别人的工作成果，向别人提供自己的工作成果。
在具体任务开发中，如果有其它的编码规则，则在相应的软件开发计划中予以明确定义。

5 编程准则

5.1 变量使用
a) 不允许随意定义全局变量。
b) 一个变量只能有一个用途；变量的用途必须和变量的名称保持一致。
c) 所有变量都必须在类和函数最前面定义，并分类排列。

5.2 数据库操作
a) 查找数据库表或视图时，只能取出确实需要的那些字段。
b) 使用无关联子查询，而不要使用关联子查询。
c) 清楚明白地使用列名，而不能使用列的序号。
d) 用事务保证数据的完整性。

5.3 对象使用
a) 尽可能晚地创建对象，并且尽可能早地释放它。
http://www.cnblogs.com/edisonchou/p/4787775.html

5.4 模块设计原则
a) 不允许随意定义公用的函数和类。
b) 函数功能单一，不允许一个函数实现两个及两个以上的功能。
c) 不能在函数内部使用全局变量，如要使用全局变量，应转化为局部变量。
d) 函数与函数之间只允许存在包含关系，而不允许存在交叉关系。即两者之间只存在单方向的调用与被调用，不存在双向的调用与被调用。

结构化要求
a) 禁止出现两条等价的支路。
例如：if (a == 2)
else if (a== 3)
//
else if (a == 2)
//
else
//
b) 避免使用GOTO语句
c) 用 IF 语句来强调只执行两组语句中的一组。禁止 ELSE GOTO 和 ELSE RETURN。
d) 用 CASE 实现多路分支
e) 避免从循环引出多个出口。
f) 函数只有一个出口。
g) 不使用条件赋值语句。
h) 避免不必要的分支。
i) 不要轻易用条件分支去替换逻辑表达式