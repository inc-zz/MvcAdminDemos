<#@ template debug="true" hostspecific="true" language="C#"  #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core"#>
<#@ import namespace="System"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.IO"#>
<#@ include file="./EntityHelper.ttinclude"#>
<#@ include file="./EntityOutputHelper.ttinclude"#>

<# 
   
    var manager = Manager.Create(Host, GenerationEnvironment); 
    string projectPath = Host.ResolveAssemblyReference("$(ProjectDir)");
	List<DbTable> tableList= new TemplateHelper().GetDbTables();
	foreach(var item in tableList)
	{
        string entityName= item.TableName.Replace("_","");
        List<DbColumn> columns =  new TemplateHelper().GetDbColumns(item.TableName,"dbo");
        var keyModel = columns.FirstOrDefault(x=>x.IsPrimaryKey==true);
        List<string> columnNameList= columns.Select(x=>x.ColumnName).ToList();
        string columnStr= string.Join(",",columnNameList);
        manager.StartNewFile(projectPath+"/Validation/"+entityName+"Validator.designer.cs");

#>
/*
*此代码由T4模板自动生成，所有在此基础上的更改将被覆盖，
*请勿在此文件添加自己的代码
*生成时间<#=DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss") #>
*/
using System;
using TZ.Infrastructure;
using TZ.Models;
using TZ.Services;
using TZ.Validation;
using TZ.Modules.PTS.Models;

namespace TZ.Modules.PTS.Validation
{
    public  partial class <#=entityName#>Validator : ValidatorBase<<#=entityName#>>
    {
        public <#=entityName#>Validator(IRegularExpressions expressions, TZContext context)
            : base(expressions, context) { }

        #region IValidator Members

        public override ValidationState Validate(<#=entityName#> _<#=entityName#>)
        {
            if (_<#=entityName#> == null) throw new ArgumentNullException("<#=entityName#>");

            ValidationState validationState = new ValidationState();

            //if (string.IsNullOrEmpty(input.Mobile))
            //    validationState.Errors.Add(CreateValidationError(input.Mobile, "Message", "Message.RequiredError", "Message is not set."));

            return validationState;
        }

        #endregion

    }
}

<#
	}
    manager.EndBlock();
    manager.Process(true); 
#>

