<#@ template debug="true" hostspecific="true" language="C#"  #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core"#>
<#@ import namespace="System"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.IO"#>
<#@ include file="./EntityHelper.ttinclude"#>
<#@ include file="./EntityOutputHelper.ttinclude"#>
<# 
   var manager = Manager.Create(Host, GenerationEnvironment); 
    string projectPath = Host.ResolveAssemblyReference("$(ProjectDir)");
	List<DbTable> tableList= new TemplateHelper().GetDbTables();
	foreach(var item in tableList)
	{
        string entityName= item.TableName.Replace("_","");
        List<DbColumn> columns =  new TemplateHelper().GetDbColumns(item.TableName,"dbo");
        var keyModel = columns.FirstOrDefault(x=>x.IsPrimaryKey==true);
        manager.StartNewFile(projectPath+"/Services/"+entityName+"Service.designer.cs");
#>
/*
*此代码由T4模板自动生成，所有在此基础上的更改将被覆盖，
*请勿在此文件添加自己的代码
*生成时间<#=DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss") #>
*/
using System;
using System.Linq;
using System.Web;
using System.Text;
using System.Collections.Generic;
using System.Data; 
using TZ.Infrastructure;
using TZ.Models;
using TZ.Modules.PTS.Extensions;
using TZ.Modules.PTS.Models;
using TZ.Modules.PTS.Repositories;
using TZ.Services;
using TZ.Validation;
using TZ.Modules.PTS.IServices;

namespace TZ.Modules.PTS.Services
{
     public partial  class <#=entityName #>Service : I<#=entityName #>Service
    {
        
        
      #region I<#=entityName #>Service Members
        private readonly I<#=entityName #>Repository repository;
        private readonly IValidationService validator;
        private readonly TZContext context;
        public <#=entityName #>Service(I<#=entityName #>Repository repository,IValidationService validator, TZContext context)
        {
            this.repository = repository;
            this.validator = validator;
            this.context = context;
        }
        
        /// <summary>
        /// 判断是否存在改记录
        /// </summary>
        /// <param name="model">实体</param>
        /// <returns></returns>
        public bool IsExists(<#=keyModel.ColumnType.ToString().Replace("System.","") #> <#=keyModel.ColumnName #>)
        {
            return repository.IsExists(<#=keyModel.ColumnName #>);
        }

        /// <summary>
        /// 获取实体
        /// </summary>
        /// <param name="ID">主键</param>
        /// <returns></returns>
        public <#=entityName #> Get<#=entityName #>(<#=keyModel.ColumnType.ToString().Replace("System.","") #> <#=keyModel.ColumnName #>)
        {
            return repository.Get<#=entityName #>(<#=keyModel.ColumnName #>);
        }
        /// <summary>
        /// 保存信息
        /// </summary>
        /// <param name="model">实体</param>
        /// <returns></returns>
        public ModelResult<<#=entityName #>> Save<#=entityName #>(<#=entityName #> model)
        {
            ValidationStateDictionary validationState = new ValidationStateDictionary();
            validationState.Add(typeof(<#=entityName #>), validator.Validate(model));
            if (!validationState.IsValid) return new ModelResult<<#=entityName #>>(validationState);
            <#=entityName #> _<#=entityName #>=repository.Save<#=entityName #>(model);
            return new ModelResult<<#=entityName #>>(_<#=entityName #>, validationState);
            

        }

        /// <summary>
        /// 添加信息
        /// </summary>
        /// <param name="model">实体</param>
        /// <returns></returns>
        public ModelResult<<#=entityName #>> Add<#=entityName #>(<#=entityName #> model)
        {
            ValidationStateDictionary validationState = new ValidationStateDictionary();
            validationState.Add(typeof(<#=entityName #>), validator.Validate(model));
            if (!validationState.IsValid) return new ModelResult<<#=entityName #>>(validationState);
            <#=entityName #> _<#=entityName #>=repository.Add<#=entityName #>(model);
            return new ModelResult<<#=entityName #>>(_<#=entityName #>, validationState);
        }

        /// <summary>
        /// 批量新增
        /// </summary>
        /// <param name="addList"></param>
        /// <returns></returns>
        public bool BatchAdd<#=entityName #>(List<<#=entityName #>> addList) {

            return repository.BatchAdd<#=entityName #>(addList);
        }

        /// <summary>
        /// 删除信息
        /// </summary>
        /// <param name="model">实体</param>
        /// <returns></returns>
        public bool Remove<#=entityName #>(PagingInfo pagingInfo)
        {
            return repository.Remove<#=entityName #>(pagingInfo);
        }
        
        /// <summary>
        /// 删除信息
        /// </summary>
        /// <param name="model">实体</param>
        /// <returns></returns>
        public bool Remove<#=entityName #>(<#=entityName #> model)
        {
            return repository.Remove<#=entityName #>(model);
        }
        
        /// <summary>
        /// 删除多条信息
        /// </summary>
        /// <param name="IDList">字符串列表</param>
        /// <returns></returns>
        public bool Remove<#=entityName #>List(string <#=keyModel.ColumnName #>List)
        {
           return repository.Remove<#=entityName #>List(<#=keyModel.ColumnName #>List);
        }

        /// <summary>
        /// 获取分页信息
        /// </summary>
        /// <param name="pagingInfo">Index:第几条开始,Size:获取几条</param>
        /// <returns></returns>
        public IPageOfItems<<#=entityName #>> Get<#=entityName #>s()
        {
            PagingInfo pagingInfo = new PagingInfo();
            pagingInfo.PageSize = 100000;
            return repository.Get<#=entityName #>sList(pagingInfo);
        }

        /// <summary>
        /// 获取分页信息
        /// </summary>
        /// <param name="pagingInfo">Index:第几条开始,Size:获取几条</param>
        /// <returns></returns>
        public IPageOfItems<<#=entityName #>> Get<#=entityName #>sList(PagingInfo pagingInfo)
        {
            return repository.Get<#=entityName #>sList(pagingInfo);
        }

        #endregion
    }
}
<# 
	} 
    manager.EndBlock();
    manager.Process(true); 
#>