<#@ assembly name="System.Core"#>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.xml" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ import namespace="System"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.Data"#>
<#@ import namespace="System.Data.SqlClient"#>
<#@ import namespace="System.Linq"#> 
<#@ include file="./Config.ttinclude"#>

<#+ 

  

    public class TemplateHelper
    {
        #region GetDbTables
        public  List<DbTable> GetDbTables()
        {
            string connectionString= config.ConnectionString;
            string database= config.DbDatabase;
            string tables= config.DbTables;
         
            if (!string.IsNullOrEmpty(tables))
            {
                tables = string.Format(" and obj.name in ('{0}')", tables.Replace(",", "','"));
            }else {
                tables = " and obj.name in ('')";
            }
            #region SQL
            string sql = string.Format(@"SELECT
                obj.name tablename,
                schem.name schemname,
                idx.rows,
                CAST
                (
                CASE 
                WHEN (SELECT COUNT(1) FROM sys.indexes WHERE object_id= obj.OBJECT_ID AND is_primary_key=1) >=1 THEN 1
                ELSE 0
                END 
                AS BIT) HasPrimaryKey                                         
                from {0}.sys.objects obj 
                inner join {0}.dbo.sysindexes idx on obj.object_id=idx.id and idx.indid<=1
                INNER JOIN {0}.sys.schemas schem ON obj.schema_id=schem.schema_id
                where type='U' {1} and  obj.name!='sysdiagrams'
                order by obj.name", database, tables);
            #endregion
            DataTable dt = GetDataTable(connectionString, sql);
            return dt.Rows.Cast<DataRow>().Select(row => new DbTable
            {
                 TableName = row["tablename"].ToString(),
                SchemaName = row["schemname"].ToString(),
                Rows = Convert.ToInt32(row["rows"]),
                HasPrimaryKey = Convert.ToBoolean(row["HasPrimaryKey"])
            }).ToList();
        }
        #endregion

		#region GetDbCnName

		public string GetDbCnName(string tableName)
		{
			string connectionString= config.ConnectionString;
			string sql = string.Format(@"select value from sys.extended_properties where major_id = object_id ('{0}')",tableName);
			DataTable dt = GetDataTable(connectionString, sql);

			var name = "";
			if(dt != null && dt.Rows.Count > 0)
			{
				name = dt.Rows[0][0].ToString();
			}
			return name;
		}

		#endregion


        #region GetDbColumns

        public List<DbColumn> GetDbColumns(string tableName, string schema)
        {
            string connectionString= config.ConnectionString;
            string database= config.DbDatabase;

            if(string.IsNullOrEmpty(schema))
                schema = "dbo";
            #region SQL
            string sql = string.Format(@"
                WITH indexCTE AS
                (
                SELECT
                ic.column_id,
                ic.index_column_id,
                ic.object_id    
                FROM {0}.sys.indexes idx
                INNER JOIN {0}.sys.index_columns ic ON idx.index_id = ic.index_id AND idx.object_id = ic.object_id
                WHERE  idx.object_id =OBJECT_ID(@tableName) AND idx.is_primary_key=1
                )
                select
                colm.column_id ColumnID,
                CAST(CASE WHEN indexCTE.column_id IS NULL THEN 0 ELSE 1 END AS BIT) IsPrimaryKey,
                colm.name ColumnName,
                systype.name ColumnType,
                colm.is_identity IsIdentity,
                colm.is_nullable IsNullable,
                cast(colm.max_length as int) ByteLength,
                (
                case 
                when systype.name='nvarchar' and colm.max_length>0 then colm.max_length/2 
                when systype.name='nchar' and colm.max_length>0 then colm.max_length/2
                when systype.name='ntext' and colm.max_length>0 then colm.max_length/2 
                else colm.max_length
                end
                ) CharLength,
                cast(colm.precision as int) Precision,
                cast(colm.scale as int) Scale,
                prop.value Remark
                from {0}.sys.columns colm
                inner join {0}.sys.types systype on colm.system_type_id=systype.system_type_id and colm.user_type_id=systype.user_type_id
                left join {0}.sys.extended_properties prop on colm.object_id=prop.major_id and colm.column_id=prop.minor_id
                LEFT JOIN indexCTE ON colm.column_id=indexCTE.column_id AND colm.object_id=indexCTE.object_id                                        
                where colm.object_id=OBJECT_ID(@tableName)
                order by colm.column_id", database);
            #endregion
            SqlParameter param = new SqlParameter("@tableName", SqlDbType.NVarChar, 100) { Value = string.Format("{0}.{1}.{2}", database, schema, tableName) };
            DataTable dt = GetDataTable(connectionString, sql, param);
            return dt.Rows.Cast<DataRow>().Select(row => new DbColumn()
            {
               ColumnID = Convert.ToInt32(row["ColumnID"]),
                IsPrimaryKey = Convert.ToBoolean(row["IsPrimaryKey"]),
                ColumnName = row["ColumnName"].ToString(),
                ColumnType = GetColumnType(row["ColumnType"].ToString()),
                IsIdentity = Convert.ToBoolean(row["IsIdentity"]),
                IsNullable = Convert.ToBoolean(row["IsNullable"]),
                ByteLength = Convert.ToInt32(row["ByteLength"]),
                CharLength = Convert.ToInt32(row["CharLength"]),
                Scale = Convert.ToInt32(row["Scale"]),
                Remark = row["Remark"].ToString()
            }).ToList();
        }
        /// <summary>
        /// 字段映射
        /// </summary>
        /// <param name="dbType"></param>
        /// <returns></returns>
        public static dynamic GetColumnType(string dbType)
        {
            switch (dbType)
            {
                case "bit":
                    return typeof(Boolean);
                case "tinyint":
                    return typeof(Byte);
                case "smallint":
                    return typeof(Int16);
                case "int":
                    return typeof(Int32);
                case "bigint":
                    return typeof(Int64);
                case "smallmoney":
                case "money":
                case "numeric":
                case "decimal":
                    return typeof(Decimal);
                case "float":
                    return typeof(Double);
                case "real":
                    return typeof(Single);
                case "smalldatetime":
                case "datetime":
                case "timestamp":
                    return typeof(DateTime);
                case "char":
                case "text":
                case "varchar":
                case "nchar":
                case "ntext":
                case "nvarchar":
                    return typeof(String);
                case "binary":
                case "varbinary":
                case "image":
                    return typeof(Byte[]);
                case "uniqueidentifier":
                    return typeof(Guid);
                case "Variant":
                    return typeof(Object);
                default:
                    return typeof(String);
            }
        }


        #endregion

        #region GetDataTable

        public static DataTable GetDataTable(string connectionString, string commandText, params SqlParameter[] parms)
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand command = connection.CreateCommand();
                command.CommandText = commandText;
                command.Parameters.AddRange(parms);
                SqlDataAdapter adapter = new SqlDataAdapter(command);
                DataTable dt = new DataTable();
                adapter.Fill(dt);
                return dt;
            }
        }

        
        #endregion
    }

    public class DbTable
    {
        public string TableName { get; set; }
        public string SchemaName { get; set; }
        public int Rows { get; set; }
        public bool HasPrimaryKey { get; set; }
    }

    public class DbColumn
    {
        public int ColumnID { get; set; }
        public bool IsPrimaryKey { get; set; }
        public string ColumnName { get; set; }
        public dynamic ColumnType { get; set; }
        public bool IsIdentity { get; set; }
        public bool IsNullable { get; set; }
        public int ByteLength { get; set; }
        public int CharLength { get; set; }
        public int Scale { get; set; }
        public string Remark { get; set; }


    }

#>