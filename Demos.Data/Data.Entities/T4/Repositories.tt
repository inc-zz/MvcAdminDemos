<#@ template debug = "true" hostspecific ="true" language= "C#"   #>
<#@ assembly name="System.Core" #>
<#@ import namespace = "System"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension = ".cs" #>
 
<#@ include file="$(SolutionDir)Demos.Data\Data.Entities\T4\EntityOutputHelper.ttinclude"#> 
<#@ include file="$(SolutionDir)Demos.Data\Data.Entities\T4\EntityHelper.ttinclude" #>
<#		
	    

        var manager = Manager.Create(Host, GenerationEnvironment);
		string projectPath = Host.ResolveAssemblyReference( "$(SolutionDir)" );
        List<DbTable> tableList= new TemplateHelper().GetDbTables();
		string savePath = projectPath+"/Demos.Data/Data.Repository/Repository";
		foreach(var entity in tableList)
		{	 
			List<DbColumn> columns =  new TemplateHelper().GetDbColumns(entity.TableName,entity.SchemaName);
			var keyModel = columns.FirstOrDefault(x=>x.IsPrimaryKey==true);
			var entityName = entity.EntityName;
			var tableName = entity.TableName;
			manager.StartNewFile(savePath+"/"+entityName + "Repository.cs");#>
//------------------------------------------------------------------------------
// 警告:
//     该代码由T4工具根据模板自动生成,直接在该代码上进行任何修改都将在重新生成后丢失!
//     如有需要应使用partial class或是继承该类进行自定义扩展。
//------------------------------------------------------------------------------
using System;
using Data.Entities.Models;
using SqlSugar;
using System.Collections.Generic;
using Data.Entities;
using System.Linq;

namespace Data.Repository.Repository
{   
	 public partial class <#=entityName#>Repository : BaseRepository, I<#=entityName#>Repository
    {

        private SqlSugarClient _db;
        public <#=entityName#>Repository()
        {
            _db = GetInstance();
        }
 
        /// <summary>
        /// 判断是否存在改记录
        /// </summary>
        /// <param name="model">实体</param>
        /// <returns></returns>
        public bool IsExists(<#=keyModel.ColumnType#> <#=keyModel.ColumnName#>)
        {
            return _db.Queryable<<#=entityName#>>().Where(x => x.<#=keyModel.ColumnName#> == <#=keyModel.ColumnName#>) != null;

        }

		/// <summary>
        /// 获取实体
        /// </summary>
        /// <param name="ID">主键</param>
        /// <returns></returns>
        public <#=entityName#> Get<#=entityName#>(<#=keyModel.ColumnType#> <#=keyModel.ColumnName#>)
        {
            return _db.Queryable<<#=entityName#>>().First(x => x.<#=keyModel.ColumnName#> == <#=keyModel.ColumnName#>);
        }

          /// <summary>
        /// 编辑信息
        /// </summary>
        /// <param name="model">实体</param>
        /// <returns></returns>
        public ModelResult<<#=entityName#>> Save<#=entityName#>(<#=entityName#> model)
        {
            var result = new ModelResult<<#=entityName#>>();
            var r = _db.Updateable<<#=entityName#>>().Where(x => x.<#=keyModel.ColumnName#> == model.<#=keyModel.ColumnName#>).ExecuteCommand();
            if (r > 0)
            {
                var resModel = _db.Queryable<<#=entityName#>>().InSingle(model.<#=keyModel.ColumnName#>);
                result.Item = resModel;
            }
            return result;
        }

       /// <summary>
        /// 添加信息
        /// </summary>
        /// <param name="model">实体</param>
        /// <returns></returns>
        public ModelResult<<#=entityName#>> Add<#=entityName#>(<#=entityName#> model)
        {
            var result = new ModelResult<<#=entityName#>>();
            var r = _db.Insertable(model).ExecuteCommand();
            if (r > 0)
            {
                var resModel = _db.Queryable<<#=entityName#>>().InSingle(model.<#=keyModel.ColumnName#>);
                result.Item = resModel;
            }
            return result;
        }

        /// <summary>
        /// 批量新增
        /// </summary>
        /// <param name="addList"></param>
        /// <returns></returns>
        public bool BatchAdd<#=entityName#>(List<<#=entityName#>> addList)
        {
            var res = _db.Insertable(addList.ToArray()).ExecuteCommand();
            return res > 0;
        }

         /// <summary>
        /// 删除信息
        /// </summary>
        /// <param name="model">实体</param>
        /// <returns></returns>
        public bool Remove<#=entityName#>(<#=entityName#> model)
        {
            var res = _db.Deleteable<<#=entityName#>>().Where(x => x.<#=keyModel.ColumnName#> == model.<#=keyModel.ColumnName#>).ExecuteCommand();
            return res > 0;
        }

       /// <summary>
        /// 删除信息
        /// </summary>
        /// <param name="model">实体</param>
        /// <returns></returns>
        public bool Remove<#=entityName#>(PagingInfo pagingInfo)
        {
            var res = _db.Ado.ExecuteCommand("DELETE FROM <#=tableName#> WHERE 1=1 @DelWhere", new
            {
                DelWhere = pagingInfo.SqlWhere.ToString()
            });
            return res > 0;
        }

		  /// <summary>
        /// 删除多条信息
        /// </summary>
        /// <param name="IDList">字符串列表</param>
        /// <returns></returns>
        public bool Remove<#=entityName#>List(string IDList)
        {
            if (string.IsNullOrWhiteSpace(IDList))
                return false;
            var newIds = IDList.Split(',');
            var res = _db.Ado.ExecuteCommand("DELETE FROM <#=tableName#> WHERE <#=keyModel.ColumnName#> IN @DELWhere", new
            {
                DelWhere = newIds.ToArray()
            });
            return res > 0;
        }

		/// <summary>
        /// 获取分页信息
        /// </summary>
        /// <param name="pagingInfo">Index:第几条开始,Size:获取几条</param>
        /// <returns></returns>
        public IPageOfItems<<#=entityName#>> Get<#=entityName#>s()
        {
            var list = _db.Queryable<<#=entityName#>>().ToList();
            var _ienumList = list.AsEnumerable();
            return new PageOfItems<<#=entityName#>>(_ienumList, 1, list.Count, list.Count);

        }

		/// <summary>
        /// 获取分页信息
        /// </summary>
        /// <param name="pagingInfo">Index:第几条开始,Size:获取几条</param>
        /// <returns></returns>
        public IPageOfItems<<#=entityName#>> Get<#=entityName#>sList(PagingInfo pagingInfo)
        {
            int totalCount = 0;

            var list = _db.Queryable<<#=entityName#>>(pagingInfo.TableName).OrderBy(x => x.<#=keyModel.ColumnName#>).ToPageList(pagingInfo.PageIndex, pagingInfo.PageSize, ref totalCount);
            var newList = list.AsEnumerable();

            return new PageOfItems<<#=entityName#>>(newList, pagingInfo.PageIndex, pagingInfo.PageSize, totalCount);

        }

    }
}
	
<#
		manager.EndBlock();    
         }            
       manager.Process(true);  
#>

