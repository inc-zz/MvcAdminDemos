<#@ template debug = "true" hostspecific ="true" language= "C#"   #>
<#@ assembly name="System.Core" #>
<#@ import namespace = "System"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension = ".cs" #>
 
<#@ include file="$(SolutionDir)Demos.Data\Data.Entities\T4\EntityOutputHelper.ttinclude"#> 
<#@ include file="$(SolutionDir)Demos.Data\Data.Entities\T4\EntityHelper.ttinclude" #>
<#		
	    

        var manager = Manager.Create(Host, GenerationEnvironment);
		string solutionDir = Host.ResolveAssemblyReference( "$(SolutionDir)" );
		string savePath = solutionDir+"/Demos.Data/Data.Repository/IRepository";
        List<DbTable> tableList= new TemplateHelper().GetDbTables();
		
		foreach(var entity in tableList)
		{	 
			List<DbColumn> columns =  new TemplateHelper().GetDbColumns(entity.TableName,entity.SchemaName);
			var keyModel = columns.FirstOrDefault(x=>x.IsPrimaryKey==true);
			var entityName = entity.EntityName;
			manager.StartNewFile(savePath+"/I"+entityName + "Repository.cs");#>

//------------------------------------------------------------------------------
// 警告:
//     该代码由T4工具根据模板自动生成,直接在该代码上进行任何修改都将在重新生成后丢失!
//     如有需要应使用partial class或是继承该类进行自定义扩展。
//------------------------------------------------------------------------------
using System;
using Data.Entities.Models;
using SqlSugar; 
using System.Collections.Generic; 
using Data.Entities;

namespace Data.Repository.Repository
{   
	public partial interface I<#=entityName#>Repository 
	{		

		  /// <summary>
        /// 判断是否存在改记录
        /// </summary>
        /// <param name="model">实体</param>
        /// <returns></returns>
        bool IsExists(<#=keyModel.ColumnType.ToString().Replace("System.","") #> <#=keyModel.ColumnName #>);
        /// <summary>
        /// 获取实体
        /// </summary>
        /// <param name="<#=keyModel.ColumnName #>">主键</param>
        /// <returns></returns>
        <#=entityName #> Get<#=entityName #>(<#=keyModel.ColumnType.ToString().Replace("System.","") #> <#=keyModel.ColumnName #>);

        /// <summary>
        /// 编辑信息
        /// </summary>
        /// <param name="model">实体</param>
        /// <returns></returns>
        ModelResult<<#=entityName #>> Save<#=entityName #>(<#=entityName #> model);

        /// <summary>
        /// 添加信息
        /// </summary>
        /// <param name="model">实体</param>
        /// <returns></returns>
        ModelResult<<#=entityName #>> Add<#=entityName #>(<#=entityName #> model);

        /// <summary>
        /// 批量新增
        /// </summary>
        /// <param name="addList"></param>
        /// <returns></returns>
        bool BatchAdd<#=entityName #>(List<<#=entityName #>> addList);

        /// <summary>
        /// 删除信息
        /// </summary>
        /// <param name="model">实体</param>
        /// <returns></returns>
        bool Remove<#=entityName #>(<#=entityName #> model);
        
         /// <summary>
        /// 删除信息
        /// </summary>
        /// <param name="model">实体</param>
        /// <returns></returns>
        bool Remove<#=entityName #>(PagingInfo pagingInfo);

        /// <summary>
        /// 删除多条信息
        /// </summary>
        /// <param name="<#=keyModel.ColumnName #>List">字符串列表</param>
        /// <returns></returns>
        bool Remove<#=entityName #>List(string <#=keyModel.ColumnName #>List);
        /// <summary>
        /// 获取分页信息
        /// </summary>
        /// <param name="pagingInfo">Index:第几条开始,Size:获取几条</param>
        /// <returns></returns>
        IPageOfItems<<#=entityName #>> Get<#=entityName #>s();

        /// <summary>
        /// 获取分页信息
        /// </summary>
        /// <param name="pagingInfo">Index:第几条开始,Size:获取几条</param>
        /// <returns></returns>
        IPageOfItems<<#=entityName #>> Get<#=entityName #>sList(PagingInfo pagingInfo);

	}
}
	
<#
		manager.EndBlock();    
         }            
       manager.Process(true);  
#>

